# 数据库平台
spring.jpa.database-platform=MySQL5InnoDB
# 数据库连接URL
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/saiotcms?characterEncoding=utf8
spring.datasource.url=jdbc:mysql://192.168.1.187/saiotcms?characterEncoding=utf8&useSSL=false
# 数据库用户名
spring.datasource.username=root
# 数据库密码
spring.datasource.password=abc123
# 数据库驱动
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# 连接池最大连接数，默认100
spring.datasource.tomcat.max-active=30
# 连接池最大空闲连接数，默认与最大连接数一样
spring.datasource.tomcat.max-idle=30
# 连接池初始连接数据，默认10
spring.datasource.tomcat.initial-size=10
# 连接池最小空闲连接数，默认与初始化连接数一样
spring.datasource.tomcat.min-idle=10
# 数据库事务是否自动提交，应设置为false
spring.datasource.tomcat.default-auto-commit=false
# 如果数据库会自动断开连接， 一般开启validation-query, test-while-idle即可，test-on-borrow,test-on-return对性能有一定影响
# mysql,sqlserver用select 1，oracle数据库用select 1 from dual
spring.datasource.tomcat.validation-query=select 1
# 当数据库连接空闲的时候，检查连接是否可用
spring.datasource.tomcat.test-while-idle=true
# 使用JNDI方式获取数据库连接，需先配置好JNDI
#spring.datasource.jndi-name=java:comp/env/jdbc/saiotcms

# 关闭默认的interceptor方式，自行使用filter方式。因为要使用shiro，shiro是filter，open session in view要在shiro之前打开
spring.jpa.open-in-view=false
# 使用增强版的主键生成器。Hibernate5默认为true，SpringBoot却默认设置为false
spring.jpa.hibernate.use-new-id-generator-mappings=true
# 检查freemarker模板根路径是否存在。无需检查，设置为false
spring.freemarker.checkTemplateLocation=false
# 后台JSP地址前缀
spring.mvc.view.prefix=/WEB-INF/views/
# 后台JSP地址后缀
spring.mvc.view.suffix=.jsp
# 关闭spring自带的favicon
spring.mvc.favicon.enabled=false
# 不限制WEB上传大小
spring.http.multipart.max-file-size=-1
spring.http.multipart.max-request-size=-1
# 关闭springboot启动时的banner
spring.main.banner-mode=off
# 日志级别为ERROR
logging.level.root=ERROR
# 显示tomcat启动信息
logging.level.org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer=INFO
logging.level.com.saiot.cms.core.Application=INFO
# 错误提示包含堆栈信息
server.error.include-stacktrace=always
# 开发环境下如果出现修改jsp需要重启才能生效的情况，可修改该项为true
#server.jsp-servlet.init-parameters.development=true
# 关闭开发环境下修改文件自动重启tomcat。配合springloaded热加载时，需要关闭这项功能。默认开启
spring.devtools.restart.enabled=false
# springboot监控系统ACTUATOR是否启用安全策略（默认没有启用ACTUATOR）
#management.security.enabled=false
# 显示jpa执行的sql语句
#spring.jpa.show-sql=true
# 调试状态。开启时会显示AutoConfig信息
#debug=true
# Web服务的端口号
server.port=8080
# Web服务上下文路径
server.servlet-path=/

# MessageSource缓存时间。单位：秒。设置为-1，则永久缓存。生产环境下应设置为永久缓存
messageSource.cacheSeconds=-1
# 前台freemarker模板缓存时间。单位：秒。设置的缓存时间过长，会导致修改模板不能立即生效。如果确定在生产环境下不会修改模板，可以将缓存设置为3600（1小时）或更长
freemarkerConfig.template_update_delay=2
# Lucene索引目录
fsDirectory.location=/WEB-INF/fulltext
# 是否自动提交全文检索索引。通常应该自动提交。如不自动提交，在非正常停止Tomcat服务时，索引会丢失。自动提交对性能有一定影响，在量大录入数据的情况下，可考虑关闭自动提交
luceneIndexTemplate.autoCommit=true
# 是否允许系统后台“文件管理 - 站点文件”功能网站文件。该功能可以让用户通过系统后台查看系统所有文件，包括存放数据库用户名、密码的文件
webFile.isEnableSiteFile=true
# 创始人（通常是admin）是否拥有所有权限且不受角色权限控制。创始人不小心取消了自己的角色管理权限时，可以开启该项
isRootAllPerms=false
# 文档管理的关键词分隔符
tagKeywordsSplit=\uFF0C\uFF1B;\uFF5C|

# 模板保存路径。一般模板保存在项目根目录的/template目录下，也可以将模板保存在其他地方。模板目录下通常包含img、css、js等文件，需确保能够被浏览器访问到
#templateStorePath=file:d:\\saiotcms\\template
templateStorePath=/template
# 模板的显示路径。模板目录下通常包含img、css、js等文件，需确保能够被浏览器访问到
templateDisplayPath=/template

# OpenOffice端口号
openofficePort=
# swftools的pdf2swf程序路径
#swftoolsPdf2swf = /usr/local/bin/pdf2swf
swftoolsPdf2swf=
# swftools字体路径。可以为空，但有可能不支持某些字体
#swftoolsLanguagedir = /usr/share/xpdf/xpdf-chinese-simplified
swftoolsLanguagedir=
# doc转html。默认为openoffice，可以设置为msoffice，需确保正版msoffice word正确安装且能正常使用
doc2html=
# 图片处理器。可选GraphicsMagick、ImageMagick、Java，默认为Java。设置为前两项要确保相关软件正确安装。Java处理gif时只能保留第一张图，失去动态效果，建议使用GraphicsMagick
imageHandler=
# 设置GraphicsMagick或ImageMagick的路径。也可在系统环境变量里设置IM4JAVA_TOOLPATH，im4java将使用System.getenv("IM4JAVA_TOOLPATH")获取该值。通常正确安装GraphicsMagick或ImageMagick即可（相关命令会自动加入操作系统PATH），不用设置该项；只有在相关命令没有在操作系统PATH中时（多见于Windows系统），才需要设置
im4javaToolpath=

# 微信配置文件
weixin.config.file=classpath:weixin.properties

# 通知来源模板
notificationSource=<a href="{sourceUrl}" target="_blank" class="notifi-source">{sourceName}</a>
# 通知多条来源模板
notificationSourceMulti= \u7B49{n}\u4EBA
# 私信通知内容模板
notificationContentMessage={sources} \u53D1\u6765{qty}\u6761 \u79C1\u4FE1\uFF1A{message} <a href="{url}" class="notifi-view" data-notifi-id="{id}">\u67E5\u770B\u79C1\u4FE1</a>

# 后台登录默认用户名（方便演示）
defUsername=
# 后台登录默认密码（方便演示）
defPassword=
# 是否允许前台用户修改密码（方便演示）。true或false，默认允许
allowMmemberChagePassword=true


aliyun.mns.accessId=
aliyun.mns.accessKey=
aliyun.mns.endpoint=
aliyun.mns.topic=
aliyun.mns.signName=
aliyun.mns.templateCode=
aliyun.mns.codeName=
aliyun.mns.templateParam1=
aliyun.mns.templateParam2=